// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("InputForms");

function make(loginInfo, apiInfo, inputFormsInfo, setDriverDateInfo, setDriverFormInfo, setRiderDateInfo, setRiderFormInfo, _children) {
  var url = apiInfo.apiUrl;
  var siteUrl = apiInfo.siteUrl;
  var rowIdAsText = String(0);
  React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&plus;"
        }
      });
  var hmtlTimesEntity = React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&times;"
        }
      });
  var hmtlAmpEntity = React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&amp;"
        }
      });
  var regexPattern = "(^\\d{5}$)|(^\\d{5}-\\d{4}$)";
  var withDataAttributes = function (data, element) {
    return React.cloneElement(element, Js_dict.fromList(data));
  };
  var inputId = function (typeName, rowIdAsText, sectionName) {
    return typeName + (sectionName + rowIdAsText);
  };
  var srdi = function (fx,index,dateInfo){{ fx(index, dateInfo); return 0; }};
  var dateChangeSupport = function (action, evt, dateInfo, dateTimeFieldName, index) {
    var dateOrTime = evt.target.value;
    var newDateInfo = spreadObject(dateInfo, dateTimeFieldName, dateOrTime);
    srdi(action, index, newDateInfo);
    return /* () */0;
  };
  var riderDateChangeHandler = function (evt) {
    dateChangeSupport(setRiderDateInfo, evt, inputFormsInfo.riderInfo.dateInfo, "date", 0);
    return /* () */0;
  };
  var riderStartTimeChangeHandler = function (evt) {
    dateChangeSupport(setRiderDateInfo, evt, inputFormsInfo.riderInfo.dateInfo, "timeStart", 0);
    return /* () */0;
  };
  var riderEndTimeChangeHandler = function (evt) {
    dateChangeSupport(setRiderDateInfo, evt, inputFormsInfo.riderInfo.dateInfo, "timeEnd", 0);
    return /* () */0;
  };
  var driverDateChangeHandler = function (evt) {
    dateChangeSupport(setDriverDateInfo, evt, inputFormsInfo.driverInfo.driverDateInfo, "date", 0);
    return /* () */0;
  };
  var driverStartTimeChangeHandler = function (evt) {
    dateChangeSupport(setDriverDateInfo, evt, inputFormsInfo.driverInfo.driverDateInfo, "timeStart", 0);
    return /* () */0;
  };
  var driverEndTimeChangeHandler = function (evt) {
    dateChangeSupport(setDriverDateInfo, evt, inputFormsInfo.driverInfo.driverDateInfo, "timeEnd", 0);
    return /* () */0;
  };
  var eventTargetType = function (target){{ return target.type; }};
  var srfi = function (fx,formInfo){{ fx(formInfo); return 0; }};
  var srfiString = function (key, change) {
    var newRiderInfo = spreadObject(inputFormsInfo.riderInfo, key, change);
    srfi(setRiderFormInfo, newRiderInfo);
    return /* () */0;
  };
  var srfiNumber = function (key, change) {
    var newRiderInfo = spreadObject(inputFormsInfo.riderInfo, key, change);
    srfi(setRiderFormInfo, newRiderInfo);
    return /* () */0;
  };
  var srfiBool = function (key, change) {
    var newRiderInfo = spreadObject(inputFormsInfo.riderInfo, key, change);
    srfi(setRiderFormInfo, newRiderInfo);
    return /* () */0;
  };
  var riderFormInfoChangeSupportNewRider = function (evt, key) {
    var targetType = eventTargetType(evt.target);
    switch (targetType) {
      case "checkbox" : 
          var change = evt.target.checked;
          srfiBool(key, change);
          break;
      case "number" : 
          var change$1 = evt.target.value;
          srfiNumber(key, change$1);
          break;
      case "radio" : 
          var change$2 = evt.target.value === "Yes";
          srfiBool(key, change$2);
          break;
      default:
        var change$3 = evt.target.value;
        srfiString(key, change$3);
    }
    return /* () */0;
  };
  var sdfi = function (fx,formInfo){{ fx(formInfo); return 0; }};
  var sdfiString = function (key, change) {
    var newDriverInfo = spreadObject(inputFormsInfo.driverInfo, key, change);
    sdfi(setDriverFormInfo, newDriverInfo);
    return /* () */0;
  };
  var sdfiNumber = function (key, change) {
    var newDriverInfo = spreadObject(inputFormsInfo.driverInfo, key, change);
    sdfi(setDriverFormInfo, newDriverInfo);
    return /* () */0;
  };
  var sdfiBool = function (key, change) {
    var newDriverInfo = spreadObject(inputFormsInfo.driverInfo, key, change);
    sdfi(setDriverFormInfo, newDriverInfo);
    return /* () */0;
  };
  var driverFormInfoChangeSupportNewDriver = function (evt, key) {
    var targetType = eventTargetType(evt.target);
    switch (targetType) {
      case "checkbox" : 
          var change = evt.target.checked;
          sdfiBool(key, change);
          break;
      case "number" : 
          var change$1 = evt.target.value;
          sdfiNumber(key, change$1);
          break;
      case "radio" : 
          var change$2 = evt.target.value === "Yes";
          sdfiBool(key, change$2);
          break;
      default:
        var change$3 = evt.target.value;
        sdfiString(key, change$3);
    }
    return /* () */0;
  };
  var riderCollectionAddressChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "collectionAddress");
    return /* () */0;
  };
  var riderCollectionZipChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "collectionZip");
    return /* () */0;
  };
  var riderDestinationAddressChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "destinationAddress");
    return /* () */0;
  };
  var riderDestinationZipChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "destinationZip");
    return /* () */0;
  };
  var riderSeatCountChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "seatCount");
    return /* () */0;
  };
  var riderPowerChairUserChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "powerChairUser");
    return /* () */0;
  };
  var riderTwoWayTripNeededChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "twoWayTripNeeded");
    return /* () */0;
  };
  var riderOtherRequirementsChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "otherRequirements");
    return /* () */0;
  };
  var riderFirstNameChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "firstName");
    return /* () */0;
  };
  var riderLastNameChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "lastName");
    return /* () */0;
  };
  var riderEmailChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "email");
    return /* () */0;
  };
  var riderPhoneChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "phone");
    return /* () */0;
  };
  var riderCellPhoneChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "cellPhone");
    return /* () */0;
  };
  var riderEmailPreferredChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "emailPreferred");
    return /* () */0;
  };
  var riderPhonePreferredChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "phonePreferred");
    return /* () */0;
  };
  var ridersmsPreferredChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "smsPreferred");
    return /* () */0;
  };
  var riderAgreeTandCChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "agreeTandC");
    return /* () */0;
  };
  var riderContactOkChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "contactOk");
    return /* () */0;
  };
  var riderOrgNameChangeHandler = function (evt) {
    riderFormInfoChangeSupportNewRider(evt, "orgName");
    return /* () */0;
  };
  var driverZipChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "driverZip");
    return /* () */0;
  };
  var driverRadiusChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "driverRadius");
    return /* () */0;
  };
  var driverSeatsAvailableChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "seatsAvailable");
    return /* () */0;
  };
  var driverPowerchairSupportChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "powerChairSupport");
    return /* () */0;
  };
  var driverHasInsuranceChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "hasInsurance");
    return /* () */0;
  };
  var driverLicenceNumberChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "licenceNumber");
    return /* () */0;
  };
  var driverFirstNameChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "firstName");
    return /* () */0;
  };
  var driverLastNameChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "lastName");
    return /* () */0;
  };
  var driverEmailChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "email");
    return /* () */0;
  };
  var driverPhoneChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "phone");
    return /* () */0;
  };
  var driverEmailPreferredChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "emailPreferred");
    return /* () */0;
  };
  var driversmsPreferredChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "smsPreferred");
    return /* () */0;
  };
  var driverAgreeTandCChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "agreeTandC");
    return /* () */0;
  };
  var driverContactOkChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "contactOk");
    return /* () */0;
  };
  var driverOrgNameChangeHandler = function (evt) {
    driverFormInfoChangeSupportNewDriver(evt, "orgName");
    return /* () */0;
  };
  var inputTimeStart = function (typeName, rowId, startTime, startTimeChangeHandler) {
    var xName = typeName + "TimeStart";
    var xId = inputId(typeName, rowId, "TimeStart");
    var xEnd = "#" + inputId(typeName, rowId, "TimeEnd");
    var match = startTime.length !== 0;
    var time = match ? startTime : "06:00";
    var f = React.createElement("input", {
          className: "form-input input--time-start",
          id: xId,
          max: "22:00",
          min: 6,
          name: xName,
          required: true,
          type: "time",
          value: time,
          onChange: startTimeChangeHandler
        });
    var data_000 = /* tuple */[
      "data-start",
      xEnd
    ];
    var data = /* :: */[
      data_000,
      /* [] */0
    ];
    return withDataAttributes(data, f);
  };
  var inputTimeEnd = function (typeName, rowId, endTime, endTimeChangeHandler) {
    var xName = typeName + "TimeEnd";
    var xId = inputId(typeName, rowId, "TimeEnd");
    var xEnd = "#" + inputId(typeName, rowId, "TimeStart");
    var match = endTime.length !== 0;
    var time = match ? endTime : "22:00";
    var f = React.createElement("input", {
          className: "form-input input--time-end",
          id: xId,
          max: "22:00",
          min: 6,
          name: xName,
          required: true,
          type: "time",
          value: time,
          onChange: endTimeChangeHandler
        });
    var data_000 = /* tuple */[
      "data-end",
      xEnd
    ];
    var data = /* :: */[
      data_000,
      /* [] */0
    ];
    return withDataAttributes(data, f);
  };
  var datePickerRow = function (typeName, rowId, dateInfo, dateChangeHandler, startTimeChangeHandler, endTimeChangeHandler) {
    var inputDateId = typeName + ("Date" + rowId);
    var match = false;
    return React.createElement("div", {
                id: "available-time-row"
              }, React.createElement("li", {
                    className: "available-times__row"
                  }, React.createElement("div", {
                        className: "form-group calendar-date-block"
                      }, React.createElement("label", {
                            htmlFor: inputDateId
                          }, "Date"), React.createElement("input", {
                            className: "form-input input--date",
                            id: inputDateId,
                            name: typeName + "Date",
                            required: true,
                            type: "date",
                            value: dateInfo.date,
                            onChange: dateChangeHandler
                          }), React.createElement("div", {
                            className: "help-block with-errors"
                          })), React.createElement("div", {
                        className: "form-group"
                      }, React.createElement("label", {
                            htmlFor: typeName + ("TimeStart" + rowId)
                          }, "Start time"), inputTimeStart(typeName, rowId, dateInfo.timeStart, startTimeChangeHandler), React.createElement("div", {
                            className: "help-block with-errors"
                          })), React.createElement("div", {
                        className: "form-group"
                      }, React.createElement("label", {
                            htmlFor: typeName + ("TimeEnd" + rowId)
                          }, "End time"), inputTimeEnd(typeName, rowId, dateInfo.timeEnd, endTimeChangeHandler), React.createElement("div", {
                            className: "help-block with-errors"
                          })), match ? React.createElement("button", {
                          "aria-label": "Delete time",
                          className: "remove-time button--cancel"
                        }, hmtlTimesEntity) : null));
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var riderDateInfo = inputFormsInfo.riderInfo.dateInfo;
              var driverDateInfo = inputFormsInfo.driverInfo.driverDateInfo;
              var riderIsoTime = formatAvailabilityPeriod(riderDateInfo.date, riderDateInfo.timeStart, riderDateInfo.timeEnd);
              var driverIsoTime = formatAvailabilityPeriod(driverDateInfo.date, driverDateInfo.timeStart, driverDateInfo.timeEnd);
              var ulRiderTimes = React.createElement("ul", {
                    className: "available-times",
                    id: "RiderAvailableTimes"
                  }, datePickerRow("Rider", rowIdAsText, riderDateInfo, riderDateChangeHandler, riderStartTimeChangeHandler, riderEndTimeChangeHandler));
              var ulDriverTimes = React.createElement("ul", {
                    className: "available-times",
                    id: "DriverAvailableTimes"
                  }, datePickerRow("Driver", rowIdAsText, driverDateInfo, driverDateChangeHandler, driverStartTimeChangeHandler, driverEndTimeChangeHandler));
              var ulRiderAvailableTimes = withDataAttributes(/* :: */[
                    /* tuple */[
                      "data-type",
                      "Rider"
                    ],
                    /* [] */0
                  ], ulRiderTimes);
              var ulDriverAvailableTimes = withDataAttributes(/* :: */[
                    /* tuple */[
                      "data-type",
                      "Driver"
                    ],
                    /* [] */0
                  ], ulDriverTimes);
              var riderEmailPreferredContact = inputFormsInfo.riderInfo.emailPreferred;
              var inputRiderPreferredEmailContact = withDataAttributes(/* :: */[
                    /* tuple */[
                      "data-emailid",
                      "#riderEmail"
                    ],
                    /* [] */0
                  ], React.createElement("input", {
                        className: "toggleRequiredEmail",
                        checked: riderEmailPreferredContact,
                        name: "RiderPreferredContact",
                        type: "checkbox",
                        value: "Email",
                        onChange: riderEmailPreferredChangeHandler
                      }));
              var mainDivStyle = {
                marginTop: "150px"
              };
              var h2Style = {
                marginTop: "40px"
              };
              var inputFormsJSX = React.createElement("div", undefined, React.createElement("h2", {
                        style: h2Style
                      }, "Input Forms"), React.createElement("div", {
                        style: mainDivStyle
                      }, React.createElement("div", {
                            className: "forms wrapper offset-top",
                            id: "formsX"
                          }, React.createElement("form", {
                                "aria-hidden": false,
                                className: "ride-form-op",
                                id: "need-ride",
                                action: url + "/rider",
                                method: "post",
                                name: "needRide"
                              }, React.createElement("input", {
                                    className: "redirect",
                                    name: "_redirect",
                                    type: "hidden",
                                    value: siteUrl + "/thanks-rider/?type_=rider"
                                  }), React.createElement("div", {
                                    className: "bannerbox"
                                  }, React.createElement("h2", {
                                        className: "bannerbox__title"
                                      }, "I need a ride"), React.createElement("div", {
                                        className: "bannerbox__content"
                                      }, null, React.createElement("p", undefined, "Please enter your details in the form below, and our automatic matching algorithm will use this information to try to find you a driver."), React.createElement("fieldset", {
                                            className: "rider-select-org"
                                          }, React.createElement("legend", undefined, "Choose your organization"), React.createElement("p", undefined, "Please choose this carefully as otherwise you may be asked to re-enter your details. Check with your organization if you are not sure."), React.createElement("div", {
                                                className: "form-column"
                                              }, React.createElement("div", {
                                                    className: "form-group"
                                                  }, React.createElement("input", {
                                                        id: "RidingOnBehalfOfOrganization",
                                                        name: "RidingOnBehalfOfOrganization",
                                                        type: "hidden",
                                                        value: "true"
                                                      }), React.createElement("label", {
                                                        htmlFor: "RidingOBOOrganizationName"
                                                      }, "Organization name"), React.createElement("select", {
                                                        id: "RidingOBOOrganizationName",
                                                        name: "RidingOBOOrganizationName",
                                                        required: true,
                                                        value: inputFormsInfo.riderInfo.orgName,
                                                        onChange: riderOrgNameChangeHandler
                                                      }, React.createElement("option", {
                                                            value: "None"
                                                          }, "None"), React.createElement("option", {
                                                            value: "NAACP"
                                                          }, "NAACP"), React.createElement("option", {
                                                            value: "AAPD"
                                                          }, "AAPD"), React.createElement("option", {
                                                            value: "PPC"
                                                          }, "PPC"), React.createElement("option", {
                                                            value: "MDCC"
                                                          }, "MDCC"), React.createElement("option", {
                                                            value: "MarchOn"
                                                          }, "MarchOn"), React.createElement("option", {
                                                            value: "CenterCG"
                                                          }, "CenterCG"), React.createElement("option", {
                                                            value: "PDAction"
                                                          }, "PDAction"), React.createElement("option", {
                                                            value: "DailyKos"
                                                          }, "DailyKos"))))), React.createElement("fieldset", {
                                            className: "date-time-pickers"
                                          }, React.createElement("legend", undefined, "Dates and Times Available"), React.createElement("p", undefined, "On what dates and times would you be available for the ride? Please pick all the time slots that could work for you: This will make it easier for us to match you with a driver. You can pick multiple time slots, on different dates or on the same date."), ulRiderAvailableTimes, null, React.createElement("input", {
                                                className: "hiddenJSONTimes",
                                                name: "AvailableRideTimesJSON",
                                                type: "hidden",
                                                value: riderIsoTime
                                              })), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Your location details"), React.createElement("div", {
                                                className: "form-column"
                                              }, React.createElement("div", {
                                                    className: "form-group"
                                                  }, React.createElement("label", {
                                                        htmlFor: "riderCollectionAddress"
                                                      }, "Pick up address"), React.createElement("input", {
                                                        className: "form-input",
                                                        id: "riderCollectionAddress",
                                                        name: "RiderCollectionAddress",
                                                        placeholder: "Your pick up address",
                                                        required: true,
                                                        type: "text",
                                                        value: inputFormsInfo.riderInfo.collectionAddress,
                                                        onChange: riderCollectionAddressChangeHandler
                                                      }), React.createElement("div", {
                                                        className: "help-block with-errors"
                                                      })), React.createElement("div", {
                                                    className: "form-group"
                                                  }, React.createElement("label", {
                                                        htmlFor: "rideArea"
                                                      }, "Pick up ZIP code"), React.createElement("input", {
                                                        className: "form-input form-input--medium",
                                                        id: "rideArea",
                                                        name: "RiderCollectionZIP",
                                                        pattern: regexPattern,
                                                        placeholder: "Where you can meet the driver",
                                                        required: true,
                                                        type: "text",
                                                        value: inputFormsInfo.riderInfo.collectionZip,
                                                        onChange: riderCollectionZipChangeHandler
                                                      }), React.createElement("div", {
                                                        className: "help-block with-errors"
                                                      })), React.createElement("div", {
                                                    className: "form-group"
                                                  }, React.createElement("label", {
                                                        htmlFor: "riderDestinationAddress"
                                                      }, "Destination address"), React.createElement("input", {
                                                        className: "form-input",
                                                        id: "riderDestinationAddress",
                                                        name: "RiderDestinationAddress",
                                                        placeholder: "Your destination address",
                                                        required: true,
                                                        type: "text",
                                                        value: inputFormsInfo.riderInfo.destinationAddress,
                                                        onChange: riderDestinationAddressChangeHandler
                                                      }), React.createElement("div", {
                                                        className: "help-block with-errors"
                                                      })), React.createElement("div", {
                                                    className: "form-group"
                                                  }, React.createElement("label", {
                                                        htmlFor: "rideDestinationZIP"
                                                      }, "Destination ZIP code"), React.createElement("input", {
                                                        className: "form-input form-input--medium",
                                                        id: "rideDestinationZIP",
                                                        name: "RiderDropOffZIP",
                                                        pattern: regexPattern,
                                                        placeholder: "To where do you need a ride?",
                                                        required: true,
                                                        type: "text",
                                                        value: inputFormsInfo.riderInfo.destinationZip,
                                                        onChange: riderDestinationZipChangeHandler
                                                      }), React.createElement("div", {
                                                        className: "help-block with-errors"
                                                      }))), null), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Vehicle requirements"), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "rideSeats"
                                                  }, "Number of seats required"), React.createElement("input", {
                                                    className: "form-input form-input--small",
                                                    id: "rideSeats",
                                                    min: 1,
                                                    name: "TotalPartySize",
                                                    required: true,
                                                    type: "number",
                                                    value: inputFormsInfo.riderInfo.seatCount,
                                                    onChange: riderSeatCountChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  }), React.createElement("small", undefined, "Please let us know how many people will need to travel together in the same car. You may take somebody with you as a safety measure."), React.createElement("small", undefined, "To make it easier for us to match people, we ask that you travel with as few people as possible.")), React.createElement("div", {
                                                className: "form-group checkbox"
                                              }, React.createElement("label", {
                                                    htmlFor: "riderIsPowerChairUser"
                                                  }, React.createElement("input", {
                                                        id: "riderIsPowerChairUser",
                                                        checked: inputFormsInfo.riderInfo.powerChairUser,
                                                        name: "NeedWheelchair",
                                                        type: "checkbox",
                                                        onChange: riderPowerChairUserChangeHandler
                                                      }), "I am a powerchair user who needs an adapted van with a lift.")), React.createElement("div", {
                                                className: "form-group checkbox"
                                              }, React.createElement("label", {
                                                    htmlFor: "rideReturn"
                                                  }, React.createElement("input", {
                                                        id: "rideReturn",
                                                        checked: inputFormsInfo.riderInfo.twoWayTripNeeded,
                                                        name: "TwoWayTripNeeded",
                                                        type: "checkbox",
                                                        onChange: riderTwoWayTripNeededChangeHandler
                                                      }), "I need a two-way trip.")), React.createElement("div", {
                                                className: "form-group form-inline form-inline-other-requirements"
                                              }, React.createElement("label", {
                                                    htmlFor: "RiderAccommodationNotes"
                                                  }, "Other Requirements", React.createElement("i", {
                                                        className: "optional"
                                                      }, "Optional")), React.createElement("textarea", {
                                                    className: "form-input",
                                                    id: "RiderAccommodationNotes",
                                                    cols: 60,
                                                    name: "RiderAccommodationNotes",
                                                    placeholder: "Please let us know any other requirements you have for your ride...",
                                                    rows: 6,
                                                    value: inputFormsInfo.riderInfo.otherRequirements,
                                                    onChange: riderOtherRequirementsChangeHandler
                                                  })), React.createElement("div", {
                                                className: "form-inline"
                                              }, React.createElement("small", undefined, "Please let us know of any other accommodation requirements."), React.createElement("ul", undefined, React.createElement("li", undefined, React.createElement("small", undefined, "Service animal")), React.createElement("li", undefined, React.createElement("small", undefined, "Assistance folding equipment")), React.createElement("li", undefined, React.createElement("small", undefined, "Assistance entering/ exiting the Vehicle")), React.createElement("li", undefined, React.createElement("small", undefined, "Child car seat or booster (please include age)")), React.createElement("li", undefined, React.createElement("small", undefined, "Do not speak English (please include languages)")), React.createElement("li", undefined, React.createElement("small", undefined, "Other"))))), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Your details"), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "riderFirstName"
                                                  }, "First name"), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "riderFirstName",
                                                    name: "RiderFirstName",
                                                    placeholder: "Your first name",
                                                    required: true,
                                                    type: "text",
                                                    value: inputFormsInfo.riderInfo.firstName,
                                                    onChange: riderFirstNameChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "riderLastName"
                                                  }, "Last name"), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "riderLastName",
                                                    name: "RiderLastName",
                                                    placeholder: "Your last name",
                                                    required: true,
                                                    type: "text",
                                                    value: inputFormsInfo.riderInfo.lastName,
                                                    onChange: riderLastNameChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "riderEmail"
                                                  }, "Email address", riderEmailPreferredContact ? null : React.createElement("i", {
                                                          className: "optional"
                                                        }, "Optional")), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "riderEmail",
                                                    name: "RiderEmail",
                                                    placeholder: "Email",
                                                    required: riderEmailPreferredContact,
                                                    type: "email",
                                                    value: inputFormsInfo.riderInfo.email,
                                                    onChange: riderEmailChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "riderPhone"
                                                  }, "Phone number (cell preferred)"), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "riderPhone",
                                                    name: "RiderPhone",
                                                    placeholder: "Phone",
                                                    required: true,
                                                    type: "tel",
                                                    value: inputFormsInfo.riderInfo.phone,
                                                    onChange: riderPhoneChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group radio"
                                              }, React.createElement("p", undefined, "Is this a cell phone?"), React.createElement("label", undefined, React.createElement("input", {
                                                        checked: inputFormsInfo.riderInfo.cellPhone === true,
                                                        name: "riderCell",
                                                        type: "radio",
                                                        value: "Yes",
                                                        onChange: riderCellPhoneChangeHandler
                                                      }), "Yes"), React.createElement("label", undefined, React.createElement("input", {
                                                        checked: inputFormsInfo.riderInfo.cellPhone === false,
                                                        name: "riderCell",
                                                        type: "radio",
                                                        value: "No",
                                                        onChange: riderCellPhoneChangeHandler
                                                      }), "No")), React.createElement("div", {
                                                className: "form-group checkbox checkbox--multi"
                                              }, React.createElement("p", undefined, "How would you prefer the driver contacts you?"), React.createElement("label", undefined, inputRiderPreferredEmailContact, "Email"), React.createElement("label", undefined, React.createElement("input", {
                                                        checked: inputFormsInfo.riderInfo.phonePreferred,
                                                        name: "RiderPreferredContact",
                                                        type: "checkbox",
                                                        value: "Phone",
                                                        onChange: riderPhonePreferredChangeHandler
                                                      }), "Phone"), React.createElement("label", undefined, React.createElement("input", {
                                                        checked: inputFormsInfo.riderInfo.smsPreferred,
                                                        name: "RiderPreferredContact",
                                                        type: "checkbox",
                                                        value: "SMS",
                                                        onChange: ridersmsPreferredChangeHandler
                                                      }), "SMS"))), React.createElement("div", {
                                            className: "form-group checkbox"
                                          }, React.createElement("label", {
                                                htmlFor: "RiderLegalConsent"
                                              }, React.createElement("input", {
                                                    id: "RiderLegalConsent",
                                                    checked: inputFormsInfo.riderInfo.agreeTandC,
                                                    name: "RiderLegalConsent",
                                                    required: true,
                                                    type: "checkbox",
                                                    onChange: riderAgreeTandCChangeHandler
                                                  }), "I agree to the", React.createElement("a", {
                                                    href: "terms-conditions/",
                                                    target: "_blank"
                                                  }, "Terms ", hmtlAmpEntity, " Conditions.")), React.createElement("small", undefined, "I understand that Carpool Vote LLC will share my contact details with the driver if there's a match. (Carpool Vote will not share personal details with anybody else, unless required by law, and will destroy them within three months of election day if you've asked us not to stay in touch.)"), React.createElement("small", undefined, "I understand that Carpool Vote provides introductions between riders and volunteer drivers who have signed up on the platform. I understand that anybody can sign up to drive and Carpool Vote is unable to perform any background checks on people who use the platform. As with any other environment where I meet new people, I will take steps to keep myself and my possessions safe and accept that Carpool Vote cannot be responsible if anything goes wrong."), React.createElement("small", undefined, "I understand that Carpool Vote cannot guarantee that I will find a ride by using the platform, or that a driver will complete the ride as agreed. In that case, I will keep looking for a ride until I have reached my destination."), React.createElement("small", undefined, "I understand that this service is open to any driver or rider - no matter what their personal background or beliefs. To help make sure that both the driver and I feel comfortable and safe, I promise that I will not discuss politics during the journey.")), React.createElement("div", {
                                            className: "form-group checkbox"
                                          }, React.createElement("label", {
                                                htmlFor: "inTouchRider"
                                              }, React.createElement("input", {
                                                    id: "inTouchRider",
                                                    checked: inputFormsInfo.riderInfo.contactOk,
                                                    name: "PleaseStayInTouch",
                                                    type: "checkbox",
                                                    onChange: riderContactOkChangeHandler
                                                  }), "We'd like to keep you updated from time to time about how the project is progressing. Please untick this box if you'd prefer us not to do this.")), React.createElement("div", {
                                            className: "form-group"
                                          }, React.createElement("button", {
                                                className: "button button--large",
                                                id: "needRideSubmit",
                                                type: "submit"
                                              }, "Sign up"), null), React.createElement("p", {
                                            className: "panel-footer"
                                          }, React.createElement("b", undefined, "What happens next?"), "Our system will use these details to automatically try to find you a driver. If there is a match, the driver will get in touch to arrange the ride.")))), React.createElement("form", {
                                "aria-hidden": false,
                                className: "driver-form-op",
                                id: "offer-ride",
                                action: url + "/driver",
                                method: "post",
                                name: "offerRide"
                              }, React.createElement("input", {
                                    className: "redirect",
                                    name: "_redirect",
                                    type: "hidden",
                                    value: siteUrl + "/thanks-driver/?type_=driver"
                                  }), React.createElement("div", {
                                    className: "bannerbox"
                                  }, React.createElement("h2", {
                                        className: "bannerbox__title"
                                      }, "I can offer a ride"), React.createElement("div", {
                                        className: "bannerbox__content"
                                      }, null, React.createElement("fieldset", {
                                            className: "driver-select-org"
                                          }, React.createElement("legend", undefined, "Choose your organization"), React.createElement("p", undefined, "Please choose this carefully as otherwise you may be asked to re-enter your details. Check with your organization if you are not sure."), React.createElement("div", {
                                                className: "form-column"
                                              }, React.createElement("div", {
                                                    className: "form-group"
                                                  }, React.createElement("input", {
                                                        id: "DrivingOnBehalfOfOrganization",
                                                        name: "DrivingOnBehalfOfOrganization",
                                                        type: "hidden",
                                                        value: "true",
                                                        onChange: driverOrgNameChangeHandler
                                                      }), React.createElement("label", {
                                                        htmlFor: "DrivingOBOOrganizationName"
                                                      }, "Organization name"), React.createElement("select", {
                                                        id: "DrivingOBOOrganizationName",
                                                        name: "DrivingOBOOrganizationName",
                                                        required: true,
                                                        value: inputFormsInfo.driverInfo.dorgName,
                                                        onChange: driverOrgNameChangeHandler
                                                      }, React.createElement("option", {
                                                            value: "None"
                                                          }, "None"), React.createElement("option", {
                                                            value: "NAACP"
                                                          }, "NAACP"), React.createElement("option", {
                                                            value: "AAPD"
                                                          }, "AAPD"), React.createElement("option", {
                                                            value: "PPC"
                                                          }, "PPC"), React.createElement("option", {
                                                            value: "MDCC"
                                                          }, "MDCC"), React.createElement("option", {
                                                            value: "MarchOn"
                                                          }, "MarchOn"), React.createElement("option", {
                                                            value: "CenterCG"
                                                          }, "CenterCG"), React.createElement("option", {
                                                            value: "PDAction"
                                                          }, "PDAction"), React.createElement("option", {
                                                            value: "DailyKos"
                                                          }, "DailyKos"))))), React.createElement("fieldset", {
                                            className: "date-time-pickers"
                                          }, React.createElement("legend", undefined, "What can you offer?"), React.createElement("h3", undefined, "Dates and times available"), React.createElement("p", undefined, "On what dates and times would you be a available to give rides? Please pick all the time slots that could work for you: This will make it easier for us to match you with someone who needs a ride. You can pick multiple time slots, on different dates or on the same date."), ulDriverAvailableTimes, null, React.createElement("input", {
                                                className: "hiddenJSONTimes",
                                                name: "AvailableDriveTimesJSON",
                                                type: "hidden",
                                                value: driverIsoTime
                                              })), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Location and vehicle"), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "rideArea"
                                                  }, "Driving ZIP code"), React.createElement("input", {
                                                    className: "form-input form-input--medium",
                                                    id: "offerArea",
                                                    name: "DriverCollectionZIP",
                                                    pattern: regexPattern,
                                                    placeholder: "Where can you pick up the rider?",
                                                    required: true,
                                                    type: "text",
                                                    value: inputFormsInfo.driverInfo.driverZip,
                                                    onChange: driverZipChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("p", undefined, "I am willing to collect within a", React.createElement("input", {
                                                        className: "form-input form-input--inline",
                                                        id: "offerMiles",
                                                        min: 0,
                                                        name: "DriverCollectionRadius",
                                                        placeholder: "e.g. 10",
                                                        required: true,
                                                        step: 1.0,
                                                        type: "number",
                                                        value: inputFormsInfo.driverInfo.driverRadius,
                                                        onChange: driverRadiusChangeHandler
                                                      }), "mile radius of this zip code."), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "driverSeats"
                                                  }, "Passenger seats available in vehicle"), React.createElement("input", {
                                                    className: "form-input form-input--small",
                                                    id: "driverSeats",
                                                    min: 0,
                                                    name: "SeatCount",
                                                    placeholder: "e.g. 2",
                                                    required: true,
                                                    type: "number",
                                                    value: inputFormsInfo.driverInfo.seatsAvailable,
                                                    onChange: driverSeatsAvailableChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group checkbox"
                                              }, React.createElement("label", {
                                                    htmlFor: "driverWheelchair"
                                                  }, React.createElement("input", {
                                                        id: "driverWheelchair",
                                                        checked: inputFormsInfo.driverInfo.powerChairSupport,
                                                        name: "DriverCanLoadRiderWithWheelchair",
                                                        type: "checkbox",
                                                        onChange: driverPowerchairSupportChangeHandler
                                                      }), "I have an adapted van with space for a powerchair")), React.createElement("div", {
                                                className: "form-group checkbox"
                                              }, React.createElement("label", {
                                                    htmlFor: "offerInsurance"
                                                  }, React.createElement("input", {
                                                        id: "offerInsurance",
                                                        checked: inputFormsInfo.driverInfo.hasInsurance,
                                                        name: "DriverHasInsurance",
                                                        required: true,
                                                        type: "checkbox",
                                                        onChange: driverHasInsuranceChangeHandler
                                                      }), "I confirm the driver has insurance"), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "driverLicence"
                                                  }, "Vehicle licence plate number"), React.createElement("input", {
                                                    className: "form-input form-input--medium",
                                                    id: "driverLicence",
                                                    name: "DriverLicenceNumber",
                                                    required: true,
                                                    type: "text",
                                                    value: inputFormsInfo.driverInfo.licenceNumber,
                                                    onChange: driverLicenceNumberChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  }))), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Your details"), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "driverFirstName"
                                                  }, "First name"), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "driverFirstName",
                                                    name: "DriverFirstName",
                                                    placeholder: "Your first name",
                                                    required: true,
                                                    type: "text",
                                                    value: inputFormsInfo.driverInfo.dfirstName,
                                                    onChange: driverFirstNameChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "driverLastName"
                                                  }, "Last name"), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "driverLastName",
                                                    name: "DriverLastName",
                                                    placeholder: "Your last name",
                                                    required: true,
                                                    type: "text",
                                                    value: inputFormsInfo.driverInfo.dlastName,
                                                    onChange: driverLastNameChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "driverEmail"
                                                  }, "Email address"), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "driverEmail",
                                                    name: "DriverEmail",
                                                    placeholder: "Email address",
                                                    required: true,
                                                    type: "email",
                                                    value: inputFormsInfo.driverInfo.demail,
                                                    onChange: driverEmailChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group"
                                              }, React.createElement("label", {
                                                    htmlFor: "driverPhone"
                                                  }, "Cell phone number"), React.createElement("input", {
                                                    className: "form-input",
                                                    id: "driverPhone",
                                                    name: "DriverPhone",
                                                    placeholder: "Phone",
                                                    required: true,
                                                    type: "tel",
                                                    value: inputFormsInfo.driverInfo.dphone,
                                                    onChange: driverPhoneChangeHandler
                                                  }), React.createElement("div", {
                                                    className: "help-block with-errors"
                                                  })), React.createElement("div", {
                                                className: "form-group checkbox checkbox--multi"
                                              }, React.createElement("p", undefined, "Preferred notification method (choose as many as you like)"), React.createElement("label", undefined, React.createElement("input", {
                                                        checked: inputFormsInfo.driverInfo.demailPreferred,
                                                        name: "DriverPreferredContact",
                                                        type: "checkbox",
                                                        value: "Email",
                                                        onChange: driverEmailPreferredChangeHandler
                                                      }), "Email"), React.createElement("label", undefined, React.createElement("input", {
                                                        checked: inputFormsInfo.driverInfo.dsmsPreferred,
                                                        name: "DriverPreferredContact",
                                                        type: "checkbox",
                                                        value: "SMS",
                                                        onChange: driversmsPreferredChangeHandler
                                                      }), "SMS"))), React.createElement("div", {
                                            className: "form-group checkbox"
                                          }, React.createElement("label", {
                                                htmlFor: "DriverAgreeTnC"
                                              }, React.createElement("input", {
                                                    id: "DriverAgreeTnC",
                                                    checked: inputFormsInfo.driverInfo.dagreeTandC,
                                                    name: "DriverAgreeTnC",
                                                    required: true,
                                                    type: "checkbox",
                                                    onChange: driverAgreeTandCChangeHandler
                                                  }), "I agree to the", React.createElement("a", {
                                                    href: "terms-conditions/",
                                                    target: "_blank"
                                                  }, "Terms ", hmtlAmpEntity, " Conditions.")), React.createElement("small", undefined, "I understand that Carpool Vote LLC will share my contact details with the driver if there's a match. (Carpool Vote will not share personal details with anybody else, unless required by law, and will destroy them within three months of election day if you've asked us not to stay in touch.)"), React.createElement("small", undefined, "I understand that Carpool Vote provides introductions between riders and volunteer drivers who have signed up on the platform. I understand that anybody can sign up to drive and Carpool Vote is unable to perform any background checks on people who use the platform. As with any other environment where I meet new people, I will take steps to keep myself and my possessions safe and accept that Carpool Vote LLC cannot be responsible if anything goes wrong."), React.createElement("small", undefined, "I understand that Carpool Vote cannot guarantee that I will find appropriate matches through the platform, or that any agreed ride will occur. I take full responsibility for any cost related to using the platform."), React.createElement("small", undefined, "I understand that this service is open to any driver or rider - no matter what their personal background or beliefs. To help make sure that both the driver and I feel comfortable and safe, I promise that I will not discuss politics during the journey.")), React.createElement("div", {
                                            className: "form-group checkbox"
                                          }, React.createElement("label", {
                                                htmlFor: "inTouchDriver"
                                              }, React.createElement("input", {
                                                    id: "inTouchDriver",
                                                    checked: inputFormsInfo.driverInfo.dcontactOk,
                                                    name: "PleaseStayInTouch",
                                                    type: "checkbox",
                                                    onChange: driverContactOkChangeHandler
                                                  }), "We'd like to keep you updated from time to time about how the project is progressing. Please untick this box if you'd prefer us not to do this.")), React.createElement("div", {
                                            className: "form-group"
                                          }, React.createElement("button", {
                                                className: "button button--large",
                                                id: "offerRideSubmit",
                                                type: "submit"
                                              }, "Sign up"), null), React.createElement("p", {
                                            className: "panel-footer"
                                          }, React.createElement("b", undefined, "What happens next?"), "Our system will use these details to try to find riders. If there is a potential match, we'll send you a notification. If you accept the match, we'll let the rider know that you'll be in touch to arrange the ride.")))))));
              var match = loginInfo.loggedIn;
              if (match) {
                return inputFormsJSX;
              } else {
                return null;
              }
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.loginInfo, jsProps.apiInfo, jsProps.inputFormsInfo, jsProps.setDriverDateInfo, jsProps.setDriverFormInfo, jsProps.setRiderDateInfo, jsProps.setRiderFormInfo, /* array */[]);
      }));

exports.component = component;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* component Not a pure module */
