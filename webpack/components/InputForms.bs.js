// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("InputForms");

function make(_children) {
  var rowId = String(0);
  var hmtlPlusEntity = React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&plus;"
        }
      });
  var hmtlTimesEntity = React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&times;"
        }
      });
  var hmtlAmpEntity = React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: "&amp;"
        }
      });
  var regexPattern = "(^\\d{5}$)|(^\\d{5}-\\d{4}$)";
  var withDataAttributesAndChildren = function (data, element, childrenx) {
    return React.cloneElement(element, Js_dict.fromList(data));
  };
  var inputId = function (typeName, rowId, sectionName) {
    return typeName + (sectionName + rowId);
  };
  var inputMonth = function (typeName, rowId) {
    var xId = inputId(typeName, rowId, "Month");
    var f = React.createElement("input", {
          className: "form-input form-input--tiny input--month",
          id: xId,
          max: "12",
          min: 1,
          placeholder: "MM",
          required: true,
          type: "number"
        });
    return withDataAttributesAndChildren(/* :: */[
                /* tuple */[
                  "data-field",
                  "month"
                ],
                /* [] */0
              ], f, /* array */[]);
  };
  var inputDay = function (typeName, rowId) {
    var xId = inputId(typeName, rowId, "Day");
    var f = React.createElement("input", {
          className: "form-input form-input--tiny input--day",
          id: xId,
          max: "31",
          min: 1,
          placeholder: "DD",
          required: true,
          type: "number"
        });
    return withDataAttributesAndChildren(/* :: */[
                /* tuple */[
                  "data-field",
                  "day"
                ],
                /* [] */0
              ], f, /* array */[]);
  };
  var inputYear = function (typeName, rowId) {
    inputId(typeName, rowId, "Year");
    var f = React.createElement("input", {
          className: "form-input form-input--tiny input--year",
          min: 2017,
          placeholder: "YYYY",
          required: true,
          type: "number"
        });
    return withDataAttributesAndChildren(/* :: */[
                /* tuple */[
                  "data-field",
                  "year"
                ],
                /* [] */0
              ], f, /* array */[]);
  };
  var inputTimeStart = function (typeName, rowId) {
    var xName = typeName + "TimeStart";
    var xId = inputId(typeName, rowId, "TimeStart");
    var xEnd = "#" + inputId(typeName, rowId, "TimeEnd");
    var f = React.createElement("input", {
          className: "form-input input--time-start",
          id: xId,
          max: "22:00",
          min: 6,
          name: xName,
          required: true,
          type: "time",
          value: "06:00"
        });
    var data_000 = /* tuple */[
      "data-start",
      xEnd
    ];
    var data = /* :: */[
      data_000,
      /* [] */0
    ];
    return withDataAttributesAndChildren(data, f, /* array */[]);
  };
  var inputTimeEnd = function (typeName, rowId) {
    var xName = typeName + "TimeEnd";
    var xId = inputId(typeName, rowId, "TimeEnd");
    var xEnd = "#" + inputId(typeName, rowId, "TimeStart");
    var f = React.createElement("input", {
          className: "form-input input--time-end",
          id: xId,
          max: "22:00",
          min: 6,
          name: xName,
          required: true,
          type: "time",
          value: "22:00"
        });
    var data_000 = /* tuple */[
      "data-end",
      xEnd
    ];
    var data = /* :: */[
      data_000,
      /* [] */0
    ];
    return withDataAttributesAndChildren(data, f, /* array */[]);
  };
  var inputDate = function (typeName, rowId) {
    var xId = inputId(typeName, rowId, "Date");
    var xName = typeName + "Date";
    return React.createElement("input", {
                className: "input--date",
                id: xId,
                name: xName,
                type: "hidden"
              });
  };
  var datePickerRow = function (typeName, rowId) {
    return React.createElement("div", {
                id: "available-time-row"
              }, React.createElement("li", {
                    className: "available-times__row"
                  }, React.createElement("div", {
                        className: "form-group calendar-date-block"
                      }, React.createElement("label", {
                            htmlFor: "{{type}}Date{{id}}"
                          }, "Date"), React.createElement("input", {
                            className: "form-input input--date",
                            id: "{{type}}Date{{id}}",
                            name: "{{type}}Date",
                            required: true,
                            type: "date"
                          }), React.createElement("div", {
                            className: "help-block with-errors"
                          })), React.createElement("div", {
                        className: "form-group text-date-block"
                      }, React.createElement("label", {
                            htmlFor: "{{type}}Date{{id}}"
                          }, "Date"), inputMonth(typeName, rowId), inputDay(typeName, rowId), inputYear(typeName, rowId), inputDate(typeName, rowId), React.createElement("div", {
                            className: "help-block with-errors"
                          })), React.createElement("div", {
                        className: "form-group"
                      }, React.createElement("label", {
                            htmlFor: typeName + ("TimeStart" + rowId)
                          }, "Start time"), inputTimeStart(typeName, rowId), React.createElement("div", {
                            className: "help-block with-errors"
                          })), React.createElement("div", {
                        className: "form-group"
                      }, React.createElement("label", {
                            htmlFor: typeName + ("TimeEnd" + rowId)
                          }, "End time"), inputTimeEnd(typeName, rowId), React.createElement("div", {
                            className: "help-block with-errors"
                          })), React.createElement("button", {
                        "aria-label": "Delete time",
                        className: "remove-time button--cancel"
                      }, hmtlTimesEntity)));
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var ulRiderTimes = React.createElement("ul", {
                    className: "available-times",
                    id: "RiderAvailableTimes"
                  }, datePickerRow("Rider", rowId));
              var ulRiderAvailableTimes = withDataAttributesAndChildren(/* :: */[
                    /* tuple */[
                      "data-type",
                      "Rider"
                    ],
                    /* [] */0
                  ], ulRiderTimes, /* array */[]);
              var element = React.createElement("ul", {
                    className: "available-times",
                    id: "DriverAvailableTimes"
                  });
              var ulDriverAvailableTimes = withDataAttributesAndChildren(/* :: */[
                    /* tuple */[
                      "data-type",
                      "Driver"
                    ],
                    /* [] */0
                  ], element, /* array */[]);
              var element$1 = React.createElement("input", {
                    className: "toggleRequiredEmail",
                    name: "RiderPreferredContact",
                    type: "checkbox",
                    value: "Email"
                  });
              var inputRiderPreferredEmailContact = withDataAttributesAndChildren(/* :: */[
                    /* tuple */[
                      "data-emailID",
                      "#riderEmail"
                    ],
                    /* [] */0
                  ], element$1, /* array */[]);
              var mainDivStyle = {
                marginTop: "150px"
              };
              return React.createElement("div", undefined, "Input Forms", React.createElement("div", {
                              style: mainDivStyle
                            }, React.createElement("div", {
                                  className: "forms wrapper offset-top",
                                  id: "formsX"
                                }, React.createElement("form", {
                                      "aria-hidden": false,
                                      className: "ride-form-op",
                                      id: "need-ride",
                                      action: "{{ api }}/rider",
                                      method: "post",
                                      name: "needRide"
                                    }, React.createElement("input", {
                                          className: "redirect",
                                          name: "_redirect",
                                          type: "hidden",
                                          value: "{{ cp_site }}/thanks-rider/?type_=rider"
                                        }), React.createElement("div", {
                                          className: "bannerbox"
                                        }, React.createElement("h2", {
                                              className: "bannerbox__title"
                                            }, "I need a ride"), React.createElement("div", {
                                              className: "bannerbox__content"
                                            }, React.createElement("a", {
                                                  "aria-label": "Close form",
                                                  "aria-controls": "need-ride",
                                                  className: "close-form button--cancel",
                                                  role: "button",
                                                  href: "#intro"
                                                }, hmtlTimesEntity), React.createElement("p", undefined, "Please enter your details in the form below, and our automatic matching algorithm will use this information to try to find you a driver."), React.createElement("fieldset", {
                                                  className: "rider-select-org"
                                                }, React.createElement("legend", undefined, "Choose your organization"), React.createElement("p", undefined, "Please choose this carefully as otherwise you may be asked to re-enter your details. Check with your organization if you are not sure."), React.createElement("div", {
                                                      className: "form-column"
                                                    }, React.createElement("div", {
                                                          className: "form-group"
                                                        }, React.createElement("input", {
                                                              id: "RidingOnBehalfOfOrganization",
                                                              name: "RidingOnBehalfOfOrganization",
                                                              type: "hidden",
                                                              value: "true"
                                                            }), React.createElement("label", {
                                                              htmlFor: "RidingOBOOrganizationName"
                                                            }, "Organization name"), React.createElement("select", {
                                                              id: "RidingOBOOrganizationName",
                                                              name: "RidingOBOOrganizationName",
                                                              required: true
                                                            }, React.createElement("option", {
                                                                  value: "None"
                                                                }, "None"), React.createElement("option", {
                                                                  value: "NAACP"
                                                                }, "NAACP"), React.createElement("option", {
                                                                  value: "AAPD"
                                                                }, "AAPD"), React.createElement("option", {
                                                                  value: "PPC"
                                                                }, "PPC"), React.createElement("option", {
                                                                  value: "MDCC"
                                                                }, "MDCC"), React.createElement("option", {
                                                                  value: "MarchOn"
                                                                }, "MarchOn"), React.createElement("option", {
                                                                  value: "CenterCG"
                                                                }, "CenterCG"), React.createElement("option", {
                                                                  value: "PDAction"
                                                                }, "PDAction"), React.createElement("option", {
                                                                  value: "DailyKos"
                                                                }, "DailyKos"))))), React.createElement("fieldset", {
                                                  className: "date-time-pickers"
                                                }, React.createElement("legend", undefined, "Dates and Times Available"), React.createElement("p", undefined, "On what dates and times would you be available for the ride? Please pick all the time slots that could work for you: This will make it easier for us to match you with a driver. You can pick multiple time slots, on different dates or on the same date."), ulRiderAvailableTimes, React.createElement("button", {
                                                      "aria-controls": "RiderAvailableTimes",
                                                      className: "add-time-btn button"
                                                    }, hmtlPlusEntity, " Add another date / time"), React.createElement("small", undefined, "(Add as many dates and time ranges as you like)"), React.createElement("input", {
                                                      className: "hiddenJSONTimes",
                                                      name: "AvailableRideTimesJSON",
                                                      type: "hidden"
                                                    })), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Your location details"), React.createElement("div", {
                                                      className: "form-column"
                                                    }, React.createElement("div", {
                                                          className: "form-group"
                                                        }, React.createElement("label", {
                                                              htmlFor: "riderCollectionAddress"
                                                            }, "Pick up address"), React.createElement("input", {
                                                              className: "form-input",
                                                              id: "riderCollectionAddress",
                                                              name: "RiderCollectionAddress",
                                                              placeholder: "Your pick up address",
                                                              required: true,
                                                              type: "text"
                                                            }), React.createElement("div", {
                                                              className: "help-block with-errors"
                                                            })), React.createElement("div", {
                                                          className: "form-group"
                                                        }, React.createElement("label", {
                                                              htmlFor: "rideArea"
                                                            }, "Pick up ZIP code"), React.createElement("input", {
                                                              className: "form-input form-input--medium",
                                                              id: "rideArea",
                                                              name: "RiderCollectionZIP",
                                                              pattern: regexPattern,
                                                              placeholder: "Where you can meet the driver",
                                                              required: true,
                                                              type: "text"
                                                            }), React.createElement("div", {
                                                              className: "help-block with-errors"
                                                            })), React.createElement("div", {
                                                          className: "form-group"
                                                        }, React.createElement("label", {
                                                              htmlFor: "riderDestinationAddress"
                                                            }, "Destination address"), React.createElement("input", {
                                                              className: "form-input",
                                                              id: "riderDestinationAddress",
                                                              name: "RiderDestinationAddress",
                                                              placeholder: "Your destination address",
                                                              required: true,
                                                              type: "text"
                                                            }), React.createElement("div", {
                                                              className: "help-block with-errors"
                                                            })), React.createElement("div", {
                                                          className: "form-group"
                                                        }, React.createElement("label", {
                                                              htmlFor: "rideDestinationZIP"
                                                            }, "Destination ZIP code"), React.createElement("input", {
                                                              className: "form-input form-input--medium",
                                                              id: "rideDestinationZIP",
                                                              name: "RiderDropOffZIP",
                                                              pattern: regexPattern,
                                                              placeholder: "To where do you need a ride?",
                                                              required: true,
                                                              type: "text"
                                                            }), React.createElement("div", {
                                                              className: "help-block with-errors"
                                                            }))), React.createElement("div", {
                                                      className: "form-column"
                                                    }, React.createElement("div", {
                                                          className: "form-group polling-place"
                                                        }, React.createElement("label", undefined, "Find your polling place"), React.createElement("div", {
                                                              className: "help-block"
                                                            }, "(Link will open your state\xe2\x80\x99s polling place checker in a new tab.)"), React.createElement("ul", {
                                                              className: "state-dropdown state-dropdown--large",
                                                              id: "location-details"
                                                            }, React.createElement("li", undefined, "Loading&hellip;"))))), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Vehicle requirements"), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "rideSeats"
                                                        }, "Number of seats required"), React.createElement("input", {
                                                          className: "form-input form-input--small",
                                                          id: "rideSeats",
                                                          min: 1,
                                                          name: "TotalPartySize",
                                                          required: true,
                                                          type: "number"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        }), React.createElement("small", undefined, "Please let us know how many people will need to travel together in the same car. You may take somebody with you as a safety measure."), React.createElement("small", undefined, "To make it easier for us to match people, we ask that you travel with as few people as possible.")), React.createElement("div", {
                                                      className: "form-group checkbox"
                                                    }, React.createElement("label", {
                                                          htmlFor: "riderIsPowerChairUser"
                                                        }, React.createElement("input", {
                                                              id: "riderIsPowerChairUser",
                                                              name: "NeedWheelchair",
                                                              type: "checkbox"
                                                            }), "I am a powerchair user who needs an adapted van with a lift.")), React.createElement("div", {
                                                      className: "form-group checkbox"
                                                    }, React.createElement("label", {
                                                          htmlFor: "rideReturn"
                                                        }, React.createElement("input", {
                                                              id: "rideReturn",
                                                              name: "TwoWayTripNeeded",
                                                              type: "checkbox"
                                                            }), "I need a two-way trip.")), React.createElement("div", {
                                                      className: "form-group form-inline form-inline-other-requirements"
                                                    }, React.createElement("label", {
                                                          htmlFor: "RiderAccommodationNotes"
                                                        }, "Other Requirements", React.createElement("i", {
                                                              className: "optional"
                                                            }, "Optional")), React.createElement("textarea", {
                                                          className: "form-input",
                                                          id: "RiderAccommodationNotes",
                                                          cols: 60,
                                                          name: "RiderAccommodationNotes",
                                                          placeholder: "Please let us know any other requirements you have for your ride...",
                                                          rows: 6
                                                        })), React.createElement("div", {
                                                      className: "form-inline"
                                                    }, React.createElement("small", undefined, "Please let us know of any other accommodation requirements."), React.createElement("ul", undefined, React.createElement("li", undefined, React.createElement("small", undefined, "Service animal")), React.createElement("li", undefined, React.createElement("small", undefined, "Assistance folding equipment")), React.createElement("li", undefined, React.createElement("small", undefined, "Assistance entering/ exiting the Vehicle")), React.createElement("li", undefined, React.createElement("small", undefined, "Child car seat or booster (please include age)")), React.createElement("li", undefined, React.createElement("small", undefined, "Do not speak English (please include languages)")), React.createElement("li", undefined, React.createElement("small", undefined, "Other"))))), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Your details"), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "riderFirstName"
                                                        }, "First name"), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "riderFirstName",
                                                          name: "RiderFirstName",
                                                          placeholder: "Your first name",
                                                          required: true,
                                                          type: "text"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "riderLastName"
                                                        }, "Last name"), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "riderLastName",
                                                          name: "RiderLastName",
                                                          placeholder: "Your last name",
                                                          required: true,
                                                          type: "text"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "riderEmail"
                                                        }, "Email address", React.createElement("i", {
                                                              className: "optional"
                                                            }, "Optional")), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "riderEmail",
                                                          name: "RiderEmail",
                                                          placeholder: "Email",
                                                          type: "email"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "riderPhone"
                                                        }, "Phone number (cell preferred)"), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "riderPhone",
                                                          name: "RiderPhone",
                                                          placeholder: "Phone",
                                                          required: true,
                                                          type: "tel"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group radio"
                                                    }, React.createElement("p", undefined, "Is this a cell phone?"), React.createElement("label", undefined, React.createElement("input", {
                                                              name: "riderCell",
                                                              type: "radio",
                                                              value: "Yes"
                                                            }), "Yes"), React.createElement("label", undefined, React.createElement("input", {
                                                              name: "riderCell",
                                                              type: "radio",
                                                              value: "No"
                                                            }), "No")), React.createElement("div", {
                                                      className: "form-group checkbox checkbox--multi"
                                                    }, React.createElement("p", undefined, "How would you prefer the driver contacts you?"), React.createElement("label", undefined, inputRiderPreferredEmailContact, "Email"), React.createElement("label", undefined, React.createElement("input", {
                                                              name: "RiderPreferredContact",
                                                              type: "checkbox",
                                                              value: "Phone"
                                                            }), "Phone"), React.createElement("label", undefined, React.createElement("input", {
                                                              name: "RiderPreferredContact",
                                                              type: "checkbox",
                                                              value: "SMS"
                                                            }), "SMS"))), React.createElement("div", {
                                                  className: "form-group checkbox"
                                                }, React.createElement("label", {
                                                      htmlFor: "RiderAgreeTnC"
                                                    }, React.createElement("input", {
                                                          id: "RiderAgreeTnC",
                                                          name: "RiderAgreeTnC",
                                                          required: true,
                                                          type: "checkbox"
                                                        }), "I agree to the", React.createElement("a", {
                                                          href: "terms-conditions/",
                                                          target: "_blank"
                                                        }, "Terms ", hmtlAmpEntity, " Conditions.")), React.createElement("small", undefined, "I understand that Carpool Vote LLC will share my contact details with the driver if there's a match. (Carpool Vote will not share personal details with anybody else, unless required by law, and will destroy them within three months of election day if you've asked us not to stay in touch.)"), React.createElement("small", undefined, "I understand that Carpool Vote provides introductions between riders and volunteer drivers who have signed up on the platform. I understand that anybody can sign up to drive and Carpool Vote is unable to perform any background checks on people who use the platform. As with any other environment where I meet new people, I will take steps to keep myself and my possessions safe and accept that Carpool Vote cannot be responsible if anything goes wrong."), React.createElement("small", undefined, "I understand that Carpool Vote cannot guarantee that I will find a ride by using the platform, or that a driver will complete the ride as agreed. In that case, I will keep looking for a ride until I have reached my destination."), React.createElement("small", undefined, "I understand that this service is open to any driver or rider - no matter what their personal background or beliefs. To help make sure that both the driver and I feel comfortable and safe, I promise that I will not discuss politics during the journey.")), React.createElement("div", {
                                                  className: "form-group checkbox"
                                                }, React.createElement("label", {
                                                      htmlFor: "inTouchRider"
                                                    }, React.createElement("input", {
                                                          id: "inTouchRider",
                                                          checked: true,
                                                          name: "PleaseStayInTouch",
                                                          type: "checkbox"
                                                        }), "We'd like to keep you updated from time to time about how the project is progressing. Please untick this box if you'd prefer us not to do this.")), React.createElement("div", {
                                                  className: "form-group"
                                                }, React.createElement("button", {
                                                      className: "button button--large",
                                                      id: "needRideSubmit",
                                                      type: "submit"
                                                    }, "Sign up"), React.createElement("a", {
                                                      className: "align-right close-form",
                                                      href: "#intro"
                                                    }, "Back")), React.createElement("p", {
                                                  className: "panel-footer"
                                                }, React.createElement("b", undefined, "What happens next?"), "Our system will use these details to automatically try to find you a driver. If there is a match, the driver will get in touch to arrange the ride.")))), React.createElement("form", {
                                      "aria-hidden": true,
                                      className: "ride-form-op",
                                      id: "offer-ride",
                                      action: "{{ api }}/driver",
                                      method: "post",
                                      name: "offerRide"
                                    }, React.createElement("input", {
                                          className: "redirect",
                                          name: "_redirect",
                                          type: "hidden",
                                          value: "{{ cp_site }}/thanks-driver/?type_=driver"
                                        }), React.createElement("div", {
                                          className: "bannerbox"
                                        }, React.createElement("h2", {
                                              className: "bannerbox__title"
                                            }, "I can offer a ride"), React.createElement("div", {
                                              className: "bannerbox__content"
                                            }, React.createElement("a", {
                                                  "aria-label": "Close form",
                                                  "aria-controls": "offer-ride",
                                                  className: "close-form button--cancel",
                                                  role: "button",
                                                  href: "#intro"
                                                }, hmtlTimesEntity), React.createElement("fieldset", {
                                                  className: "driver-select-org"
                                                }, React.createElement("legend", undefined, "Choose your organization"), React.createElement("p", undefined, "Please choose this carefully as otherwise you may be asked to re-enter your details. Check with your organization if you are not sure."), React.createElement("div", {
                                                      className: "form-column"
                                                    }, React.createElement("div", {
                                                          className: "form-group"
                                                        }, React.createElement("input", {
                                                              id: "DrivingOnBehalfOfOrganization",
                                                              name: "DrivingOnBehalfOfOrganization",
                                                              type: "hidden",
                                                              value: "true"
                                                            }), React.createElement("label", {
                                                              htmlFor: "DrivingOBOOrganizationName"
                                                            }, "Organization name"), React.createElement("select", {
                                                              id: "DrivingOBOOrganizationName",
                                                              name: "DrivingOBOOrganizationName",
                                                              required: true
                                                            }, React.createElement("option", {
                                                                  value: "None"
                                                                }, "None"), React.createElement("option", {
                                                                  value: "NAACP"
                                                                }, "NAACP"), React.createElement("option", {
                                                                  value: "AAPD"
                                                                }, "AAPD"), React.createElement("option", {
                                                                  value: "PPC"
                                                                }, "PPC"), React.createElement("option", {
                                                                  value: "MDCC"
                                                                }, "MDCC"), React.createElement("option", {
                                                                  value: "MarchOn"
                                                                }, "MarchOn"), React.createElement("option", {
                                                                  value: "CenterCG"
                                                                }, "CenterCG"), React.createElement("option", {
                                                                  value: "PDAction"
                                                                }, "PDAction"), React.createElement("option", {
                                                                  value: "DailyKos"
                                                                }, "DailyKos"))))), React.createElement("fieldset", {
                                                  className: "date-time-pickers"
                                                }, React.createElement("legend", undefined, "What can you offer?"), React.createElement("h3", undefined, "Dates and times available"), React.createElement("p", undefined, "On what dates and times would you be a available to give rides? Please pick all the time slots that could work for you: This will make it easier for us to match you with someone who needs a ride. You can pick multiple time slots, on different dates or on the same date."), ulDriverAvailableTimes, React.createElement("button", {
                                                      "aria-controls": "DriverAvailableTimes",
                                                      className: "add-time-btn button"
                                                    }, hmtlPlusEntity, " Add another date / time"), React.createElement("small", undefined, "(Add as many dates and time ranges as you like)"), React.createElement("input", {
                                                      className: "hiddenJSONTimes",
                                                      name: "AvailableDriveTimesJSON",
                                                      type: "hidden"
                                                    })), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Location and vehicle"), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "rideArea"
                                                        }, "Driving ZIP code"), React.createElement("input", {
                                                          className: "form-input form-input--medium",
                                                          id: "offerArea",
                                                          name: "DriverCollectionZIP",
                                                          pattern: regexPattern,
                                                          placeholder: "Where can you pick up the rider?",
                                                          required: true,
                                                          type: "text"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("p", undefined, "I am willing to collect within a", React.createElement("input", {
                                                              className: "form-input form-input--inline",
                                                              id: "offerMiles",
                                                              min: 0,
                                                              name: "DriverCollectionRadius",
                                                              placeholder: "e.g. 10",
                                                              required: true,
                                                              step: 1.0,
                                                              type: "number"
                                                            }), "mile radius of this zip code."), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "driverSeats"
                                                        }, "Passenger seats available in vehicle"), React.createElement("input", {
                                                          className: "form-input form-input--small",
                                                          id: "driverSeats",
                                                          min: 0,
                                                          name: "SeatCount",
                                                          placeholder: "e.g. 2",
                                                          required: true,
                                                          type: "number"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group checkbox"
                                                    }, React.createElement("label", {
                                                          htmlFor: "driverWheelchair"
                                                        }, React.createElement("input", {
                                                              id: "driverWheelchair",
                                                              name: "DriverCanLoadRiderWithWheelchair",
                                                              type: "checkbox"
                                                            }), "I have an adapted van with space for a powerchair")), React.createElement("div", {
                                                      className: "form-group checkbox"
                                                    }, React.createElement("label", {
                                                          htmlFor: "offerInsurance"
                                                        }, React.createElement("input", {
                                                              id: "offerInsurance",
                                                              name: "DriverHasInsurance",
                                                              required: true,
                                                              type: "checkbox"
                                                            }), "I confirm the driver has insurance"), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "driverLicence"
                                                        }, "Vehicle licence plate number"), React.createElement("input", {
                                                          className: "form-input form-input--medium",
                                                          id: "driverLicence",
                                                          name: "DriverLicenceNumber",
                                                          required: true,
                                                          type: "text"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        }))), React.createElement("fieldset", undefined, React.createElement("legend", undefined, "Your details"), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "driverFirstName"
                                                        }, "First name"), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "driverFirstName",
                                                          name: "DriverFirstName",
                                                          placeholder: "Your first name",
                                                          required: true,
                                                          type: "text"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "driverLastName"
                                                        }, "Last name"), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "driverLastName",
                                                          name: "DriverLastName",
                                                          placeholder: "Your last name",
                                                          required: true,
                                                          type: "text"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "driverEmail"
                                                        }, "Email address"), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "driverEmail",
                                                          name: "DriverEmail",
                                                          placeholder: "Email address",
                                                          required: true,
                                                          type: "email"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group"
                                                    }, React.createElement("label", {
                                                          htmlFor: "driverPhone"
                                                        }, "Cell phone number"), React.createElement("input", {
                                                          className: "form-input",
                                                          id: "driverPhone",
                                                          name: "DriverPhone",
                                                          placeholder: "Phone",
                                                          required: true,
                                                          type: "tel"
                                                        }), React.createElement("div", {
                                                          className: "help-block with-errors"
                                                        })), React.createElement("div", {
                                                      className: "form-group checkbox checkbox--multi"
                                                    }, React.createElement("p", undefined, "Preferred notification method (choose as many as you like)"), React.createElement("label", undefined, React.createElement("input", {
                                                              name: "DriverPreferredContact",
                                                              type: "checkbox",
                                                              value: "Email"
                                                            }), "Email"), React.createElement("label", undefined, React.createElement("input", {
                                                              name: "DriverPreferredContact",
                                                              type: "checkbox",
                                                              value: "SMS"
                                                            }), "SMS"))), React.createElement("div", {
                                                  className: "form-group checkbox"
                                                }, React.createElement("label", {
                                                      htmlFor: "DriverAgreeTnC"
                                                    }, React.createElement("input", {
                                                          id: "DriverAgreeTnC",
                                                          name: "DriverAgreeTnC",
                                                          required: true,
                                                          type: "checkbox"
                                                        }), "I agree to the", React.createElement("a", {
                                                          href: "terms-conditions/",
                                                          target: "_blank"
                                                        }, "Terms ", hmtlAmpEntity, " Conditions.")), React.createElement("small", undefined, "I understand that Carpool Vote LLC will share my contact details with the driver if there's a match. (Carpool Vote will not share personal details with anybody else, unless required by law, and will destroy them within three months of election day if you've asked us not to stay in touch.)"), React.createElement("small", undefined, "I understand that Carpool Vote provides introductions between riders and volunteer drivers who have signed up on the platform. I understand that anybody can sign up to drive and Carpool Vote is unable to perform any background checks on people who use the platform. As with any other environment where I meet new people, I will take steps to keep myself and my possessions safe and accept that Carpool Vote LLC cannot be responsible if anything goes wrong."), React.createElement("small", undefined, "I understand that Carpool Vote cannot guarantee that I will find appropriate matches through the platform, or that any agreed ride will occur. I take full responsibility for any cost related to using the platform."), React.createElement("small", undefined, "I understand that this service is open to any driver or rider - no matter what their personal background or beliefs. To help make sure that both the driver and I feel comfortable and safe, I promise that I will not discuss politics during the journey.")), React.createElement("div", {
                                                  className: "form-group checkbox"
                                                }, React.createElement("label", {
                                                      htmlFor: "inTouchDriver"
                                                    }, React.createElement("input", {
                                                          id: "inTouchDriver",
                                                          checked: true,
                                                          name: "PleaseStayInTouch",
                                                          type: "checkbox"
                                                        }), "We'd like to keep you updated from time to time about how the project is progressing. Please untick this box if you'd prefer us not to do this.")), React.createElement("div", {
                                                  className: "form-group"
                                                }, React.createElement("button", {
                                                      className: "button button--large",
                                                      id: "offerRideSubmit",
                                                      type: "submit"
                                                    }, "Sign up"), React.createElement("a", {
                                                      className: "align-right close-form",
                                                      href: "#intro"
                                                    }, "Back")), React.createElement("p", {
                                                  className: "panel-footer"
                                                }, React.createElement("b", undefined, "What happens next?"), "Our system will use these details to try to find riders. If there is a potential match, we'll send you a notification. If you accept the match, we'll let the rider know that you'll be in touch to arrange the ride.")))))));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (_jsProps) {
        return make(/* array */[]);
      }));

exports.component = component;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* component Not a pure module */
